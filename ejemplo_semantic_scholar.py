#!/usr/bin/env python3
"""
Ejemplo de uso de la API de Semantic Scholar
"""

from semantic_scholar_api import SemanticScholarAPI, imprimir_y_guardar_csv


def ejemplo_basico():
    """Ejemplo b√°sico de uso de la API"""
    print("üéì EJEMPLO DE USO - SEMANTIC SCHOLAR API")
    print("=" * 60)
    
    # Crear cliente (sin API key por ahora)
    print("üì° Inicializando cliente de Semantic Scholar...")
    api = SemanticScholarAPI()
    
    # Ejemplo 1: B√∫squeda general
    print("\nüìö Ejemplo 1: B√∫squeda general")
    print("-" * 40)
    query = "machine learning"
    print(f"üîç Buscando: '{query}'")
    
    articulos = api.buscar_articulos(query, num_resultados=3)
    
    if articulos:
        print(f"‚úÖ Se encontraron {len(articulos)} art√≠culos")
        archivo_csv = imprimir_y_guardar_csv(articulos, query=query)
    else:
        print("‚ùå No se encontraron art√≠culos")
    
    # Ejemplo 1b: B√∫squeda con filtro de a√±os
    print("\nüìö Ejemplo 1b: B√∫squeda con filtro de a√±os")
    print("-" * 40)
    query = "deep learning"
    print(f"üîç Buscando: '{query}' (a√±os 2020-2024)")
    
    articulos_filtrados = api.buscar_articulos(query, num_resultados=3, a√±o_desde=2020, a√±o_hasta=2024)
    
    if articulos_filtrados:
        print(f"‚úÖ Se encontraron {len(articulos_filtrados)} art√≠culos (2020-2024)")
        archivo_csv = imprimir_y_guardar_csv(articulos_filtrados, query=f"{query}_2020-2024")
    else:
        print("‚ùå No se encontraron art√≠culos en ese rango")
    
    # Ejemplo 2: B√∫squeda por autor
    print(f"\nüë§ Ejemplo 2: B√∫squeda por autor")
    print("-" * 40)
    autor = "Andrew Ng"
    print(f"üîç Buscando art√≠culos de: '{autor}'")
    
    articulos_autor = api.buscar_por_autor(autor, num_resultados=2)
    
    if articulos_autor:
        print(f"‚úÖ Se encontraron {len(articulos_autor)} art√≠culos")
        archivo_csv = imprimir_y_guardar_csv(articulos_autor, query=f"autor_{autor}")
    else:
        print("‚ùå No se encontraron art√≠culos del autor")
    
    # Ejemplo 2b: B√∫squeda por autor con filtro
    print(f"\nüë§ Ejemplo 2b: B√∫squeda por autor con filtro")
    print("-" * 40)
    autor = "Geoffrey Hinton"
    print(f"üîç Buscando art√≠culos de: '{autor}' (desde 2010)")
    
    articulos_autor_filtrado = api.buscar_por_autor(autor, num_resultados=2, a√±o_desde=2010)
    
    if articulos_autor_filtrado:
        print(f"‚úÖ Se encontraron {len(articulos_autor_filtrado)} art√≠culos (desde 2010)")
        archivo_csv = imprimir_y_guardar_csv(articulos_autor_filtrado, query=f"autor_{autor}_desde_2010")
    else:
        print("‚ùå No se encontraron art√≠culos del autor en ese per√≠odo")
    
    # Ejemplo 3: B√∫squeda por t√≠tulo
    print(f"\nüìÑ Ejemplo 3: B√∫squeda por t√≠tulo")
    print("-" * 40)
    titulo = "neural networks"
    print(f"üîç Buscando art√≠culos con t√≠tulo: '{titulo}'")
    
    articulos_titulo = api.buscar_por_titulo(titulo, num_resultados=2)
    
    if articulos_titulo:
        print(f"‚úÖ Se encontraron {len(articulos_titulo)} art√≠culos")
        archivo_csv = imprimir_y_guardar_csv(articulos_titulo, query=f"titulo_{titulo}")
    else:
        print("‚ùå No se encontraron art√≠culos con ese t√≠tulo")


def ejemplo_programatico():
    """Ejemplo de c√≥mo usar en tu propio c√≥digo"""
    print(f"\n{'='*60}")
    print("üíª EJEMPLO DE USO PROGRAM√ÅTICO")
    print("="*60)
    
    codigo_ejemplo = '''
# Importar la API
from semantic_scholar_api import SemanticScholarAPI, imprimir_y_guardar_csv

# 1. Crear cliente
api = SemanticScholarAPI()  # Sin API key
# api = SemanticScholarAPI("tu_api_key_aqui")  # Con API key

# 2. B√∫squeda general
articulos = api.buscar_articulos("artificial intelligence", num_resultados=5)

# 3. B√∫squeda con filtro de a√±os
articulos_recientes = api.buscar_articulos("machine learning", 5, a√±o_desde=2020, a√±o_hasta=2024)

# 4. Mostrar y guardar en CSV
archivo = imprimir_y_guardar_csv(articulos, query="artificial intelligence")

# 5. Solo guardar en CSV (sin mostrar)
from semantic_scholar_api import guardar_articulos_csv
archivo = guardar_articulos_csv(articulos, "mi_archivo.csv", "AI research")

# 6. B√∫squeda por autor
articulos_autor = api.buscar_por_autor("Geoffrey Hinton", 10)

# 7. B√∫squeda por autor con filtro
articulos_autor_recientes = api.buscar_por_autor("Yann LeCun", 5, a√±o_desde=2015)

# 8. B√∫squeda por t√≠tulo
articulos_titulo = api.buscar_por_titulo("neural networks", 5)

# 9. B√∫squeda por t√≠tulo con rango espec√≠fico
articulos_titulo_periodo = api.buscar_por_titulo("deep learning", 3, a√±o_desde=2018, a√±o_hasta=2022)

# 7. Obtener art√≠culo espec√≠fico por ID
articulo = api.obtener_articulo_por_id("204e3073870fae3d05bcbc2f6a8e263d9b72e776")

# 8. Procesar resultados
for articulo in articulos:
    print(f"T√≠tulo: {articulo['titulo']}")
    print(f"Citaciones: {articulo['citation_count']}")
    print(f"A√±o: {articulo['year']}")
    print(f"Campos: {articulo['campos_estudio']}")
    '''
    
    print(codigo_ejemplo)


def mostrar_ventajas():
    """Muestra las ventajas de usar la API"""
    print(f"\n{'='*60}")
    print("üåü VENTAJAS DE SEMANTIC SCHOLAR API")
    print("="*60)
    
    print("üöÄ Comparaci√≥n con Google Scholar scraping:")
    print()
    print("‚ùå Google Scholar (scraping):")
    print("   ‚Ä¢ Bloqueos frecuentes (Error 429)")
    print("   ‚Ä¢ Captchas y limitaciones de IP") 
    print("   ‚Ä¢ Estructura HTML puede cambiar")
    print("   ‚Ä¢ Delays largos necesarios")
    print("   ‚Ä¢ Riesgo de ban permanente")
    
    print("\n‚úÖ Semantic Scholar API:")
    print("   ‚Ä¢ Sin bloqueos ni captchas")
    print("   ‚Ä¢ API oficial y estable")
    print("   ‚Ä¢ Datos estructurados consistentes") 
    print("   ‚Ä¢ L√≠mites claros y predecibles")
    print("   ‚Ä¢ Soporte oficial")
    print("   ‚Ä¢ Informaci√≥n m√°s completa")
    
    print("\nüìä Datos adicionales disponibles:")
    print("   ‚Ä¢ Campos de estudio categorizados")
    print("   ‚Ä¢ M√©tricas de citaciones actualizadas")
    print("   ‚Ä¢ Informaci√≥n de venues/conferencias")
    print("   ‚Ä¢ IDs √∫nicos para seguimiento")
    print("   ‚Ä¢ Tipos de publicaci√≥n")
    print("   ‚Ä¢ Referencias y citaciones")
    
    print("\n‚ö° Rendimiento:")
    print("   ‚Ä¢ Sin API Key: 1 request/segundo")
    print("   ‚Ä¢ Con API Key: 100 requests/segundo")
    print("   ‚Ä¢ Hasta 100 resultados por b√∫squeda")
    print("   ‚Ä¢ Respuestas en JSON estructurado")


if __name__ == "__main__":
    print("üéì GOOGLE ACAD√âMICO - SEMANTIC SCHOLAR API")
    print("Ejemplos de uso y migraci√≥n de scraping a API oficial")
    print("="*60)
    
    try:
        ejemplo_basico()
        ejemplo_programatico() 
        mostrar_ventajas()
        
        print(f"\n{'='*60}")
        print("‚ú® ¬°EJEMPLOS COMPLETADOS!")
        print("="*60)
        print("üìù Revisa los archivos CSV generados")
        print("üí° Para uso interactivo ejecuta: python semantic_scholar_main.py")
        print("üîë Para mejores l√≠mites obt√©n una API Key en:")
        print("   https://www.semanticscholar.org/product/api")
        
    except Exception as e:
        print(f"\n‚ùå Error durante los ejemplos: {e}")
        print("üí° Verifica tu conexi√≥n a internet y vuelve a intentar")