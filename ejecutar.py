#!/usr/bin/env python3
"""
Script de uso pr√°ctico del Google Acad√©mico Web Scraper
Ejecuta este script para usar el scraper de forma interactiva
"""

import time
import sys
from google_academico import GoogleScholarScraper, imprimir_articulos, imprimir_y_guardar_csv, guardar_articulos_csv


def mostrar_menu():
    """Muestra el men√∫ de opciones"""
    print("\n" + "="*60)
    print("üéì GOOGLE ACAD√âMICO WEB SCRAPER")
    print("="*60)
    print("1. B√∫squeda general de art√≠culos")
    print("2. B√∫squeda por autor")
    print("3. B√∫squeda por t√≠tulo")
    print("4. Ver informaci√≥n del proyecto")
    print("5. Salir")
    print("="*60)
    print("üìÑ Nota: Todos los resultados se guardan autom√°ticamente en CSV")


def busqueda_general():
    """Realiza una b√∫squeda general"""
    scraper = GoogleScholarScraper()
    
    print("\nüìö B√öSQUEDA GENERAL DE ART√çCULOS")
    print("-" * 40)
    
    query = input("Ingrese t√©rminos de b√∫squeda: ").strip()
    if not query:
        print("‚ùå Debe ingresar t√©rminos de b√∫squeda")
        return
    
    try:
        num_resultados = int(input("N√∫mero de resultados (1-10, default=3): ") or "3")
        num_resultados = max(1, min(10, num_resultados))
    except ValueError:
        num_resultados = 3
    
    # Preguntar sobre el archivo CSV
    guardar_csv = input("¬øGuardar en archivo CSV? (S/n): ").strip().lower()
    guardar_csv = guardar_csv != 'n'
    
    if guardar_csv:
        nombre_archivo = input("Nombre del archivo CSV (opcional): ").strip()
        if not nombre_archivo:
            nombre_archivo = None
    
    print(f"\nüîç Buscando '{query}'...")
    print("‚è≥ Por favor espere (esto puede tomar unos segundos)...")
    
    try:
        articulos = scraper.buscar_articulos(
            query=query, 
            num_resultados=num_resultados,
            delay=3
        )
        
        if articulos:
            print(f"\n‚úÖ Se encontraron {len(articulos)} art√≠culos:")
            
            if guardar_csv:
                # Guardar en CSV y mostrar en pantalla
                archivo_csv = imprimir_y_guardar_csv(articulos, nombre_archivo, query)
            else:
                # Solo mostrar en pantalla
                imprimir_articulos(articulos)
        else:
            print("\n‚ö†Ô∏è No se encontraron art√≠culos.")
            mostrar_consejos_bloqueo()
            
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        if "429" in str(e):
            mostrar_consejos_bloqueo()


def busqueda_por_autor():
    """Realiza una b√∫squeda por autor"""
    scraper = GoogleScholarScraper()
    
    print("\nüë§ B√öSQUEDA POR AUTOR")
    print("-" * 40)
    
    autor = input("Ingrese el nombre del autor: ").strip()
    if not autor:
        print("‚ùå Debe ingresar un nombre de autor")
        return
    
    try:
        num_resultados = int(input("N√∫mero de resultados (1-10, default=3): ") or "3")
        num_resultados = max(1, min(10, num_resultados))
    except ValueError:
        num_resultados = 3
    
    # Preguntar sobre el archivo CSV
    guardar_csv = input("¬øGuardar en archivo CSV? (S/n): ").strip().lower()
    guardar_csv = guardar_csv != 'n'
    
    if guardar_csv:
        nombre_archivo = input("Nombre del archivo CSV (opcional): ").strip()
        if not nombre_archivo:
            nombre_archivo = None
    
    print(f"\nüîç Buscando art√≠culos de '{autor}'...")
    print("‚è≥ Por favor espere...")
    
    try:
        articulos = scraper.buscar_por_autor(autor, num_resultados)
        
        if articulos:
            print(f"\n‚úÖ Se encontraron {len(articulos)} art√≠culos:")
            
            if guardar_csv:
                # Guardar en CSV y mostrar en pantalla
                archivo_csv = imprimir_y_guardar_csv(articulos, nombre_archivo, f"autor_{autor}")
            else:
                # Solo mostrar en pantalla
                imprimir_articulos(articulos)
        else:
            print("\n‚ö†Ô∏è No se encontraron art√≠culos para este autor.")
            mostrar_consejos_bloqueo()
            
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        if "429" in str(e):
            mostrar_consejos_bloqueo()


def busqueda_por_titulo():
    """Realiza una b√∫squeda por t√≠tulo"""
    scraper = GoogleScholarScraper()
    
    print("\nüìÑ B√öSQUEDA POR T√çTULO")
    print("-" * 40)
    
    titulo = input("Ingrese palabras del t√≠tulo: ").strip()
    if not titulo:
        print("‚ùå Debe ingresar palabras del t√≠tulo")
        return
    
    try:
        num_resultados = int(input("N√∫mero de resultados (1-10, default=3): ") or "3")
        num_resultados = max(1, min(10, num_resultados))
    except ValueError:
        num_resultados = 3
    
    # Preguntar sobre el archivo CSV
    guardar_csv = input("¬øGuardar en archivo CSV? (S/n): ").strip().lower()
    guardar_csv = guardar_csv != 'n'
    
    if guardar_csv:
        nombre_archivo = input("Nombre del archivo CSV (opcional): ").strip()
        if not nombre_archivo:
            nombre_archivo = None
    
    print(f"\nüîç Buscando art√≠culos con t√≠tulo que contenga '{titulo}'...")
    print("‚è≥ Por favor espere...")
    
    try:
        articulos = scraper.buscar_por_titulo(titulo, num_resultados)
        
        if articulos:
            print(f"\n‚úÖ Se encontraron {len(articulos)} art√≠culos:")
            
            if guardar_csv:
                # Guardar en CSV y mostrar en pantalla
                archivo_csv = imprimir_y_guardar_csv(articulos, nombre_archivo, f"titulo_{titulo}")
            else:
                # Solo mostrar en pantalla
                imprimir_articulos(articulos)
        else:
            print("\n‚ö†Ô∏è No se encontraron art√≠culos con ese t√≠tulo.")
            mostrar_consejos_bloqueo()
            
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        if "429" in str(e):
            mostrar_consejos_bloqueo()


def mostrar_info():
    """Muestra informaci√≥n del proyecto"""
    print("\n" + "="*60)
    print("‚ÑπÔ∏è  INFORMACI√ìN DEL PROYECTO")
    print("="*60)
    print("üìã Nombre: Google Acad√©mico Web Scraper")
    print("üë§ Autor: arturocesar111")
    print("üéØ Prop√≥sito: Extraer informaci√≥n de art√≠culos cient√≠ficos de Google Scholar")
    print("\nüìö Caracter√≠sticas:")
    print("   ‚Ä¢ B√∫squeda general por t√©rminos")
    print("   ‚Ä¢ B√∫squeda por autor espec√≠fico")
    print("   ‚Ä¢ B√∫squeda por t√≠tulo")
    print("   ‚Ä¢ Extracci√≥n de t√≠tulos, autores, res√∫menes, citaciones")
    print("\n‚ö†Ô∏è  Limitaciones:")
    print("   ‚Ä¢ Google Scholar puede bloquear peticiones excesivas")
    print("   ‚Ä¢ Uso recomendado solo para investigaci√≥n y educaci√≥n")
    print("   ‚Ä¢ Respetar t√©rminos de servicio de Google Scholar")
    print("\nüìÅ Archivos del proyecto:")
    print("   ‚Ä¢ google_academico.py - M√≥dulo principal")
    print("   ‚Ä¢ ejemplo.py - Ejemplos de uso")
    print("   ‚Ä¢ test_scraper.py - Pruebas b√°sicas")
    print("   ‚Ä¢ README.md - Documentaci√≥n completa")


def mostrar_consejos_bloqueo():
    """Muestra consejos para cuando Google Scholar bloquea"""
    print("\nüö´ GOOGLE SCHOLAR EST√Å BLOQUEANDO LAS PETICIONES")
    print("-" * 50)
    print("üí° Esto es normal. Soluciones:")
    print("   1. Esperar 10-15 minutos antes de volver a intentar")
    print("   2. Usar menos b√∫squedas por sesi√≥n")
    print("   3. Aumentar delays entre peticiones")
    print("   4. Cambiar de red/IP si es posible")
    print("   5. Usar VPN")
    print("\nüìù Para uso en c√≥digo propio:")
    print("   ‚Ä¢ Usar delays de 5+ segundos entre peticiones")
    print("   ‚Ä¢ Limitar n√∫mero de resultados")
    print("   ‚Ä¢ Implementar retry con backoff exponencial")


def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando Google Acad√©mico Web Scraper...")
    print("‚ö†Ô∏è  Nota: Google Scholar puede limitar peticiones autom√°ticas")
    
    while True:
        mostrar_menu()
        
        try:
            opcion = input("\nSeleccione una opci√≥n (1-5): ").strip()
            
            if opcion == "1":
                busqueda_general()
            elif opcion == "2":
                busqueda_por_autor()
            elif opcion == "3":
                busqueda_por_titulo()
            elif opcion == "4":
                mostrar_info()
            elif opcion == "5":
                print("\nüëã ¬°Hasta luego!")
                break
            else:
                print("\n‚ùå Opci√≥n inv√°lida. Seleccione 1-5.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrumpido. ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"\n‚ùå Error inesperado: {e}")
            
        input("\nüì± Presione Enter para continuar...")


if __name__ == "__main__":
    main()