#!/usr/bin/env python3
"""
Google Acad√©mico Scraper - Versi√≥n con API de Semantic Scholar
Script principal que usa la API oficial de Semantic Scholar
"""

import sys
import time
from semantic_scholar_api import SemanticScholarAPI, imprimir_y_guardar_csv, imprimir_articulos


def obtener_rango_a√±os():
    """Solicita rango de a√±os para filtrar b√∫squedas"""
    print("\nüìÖ FILTRO POR RANGO DE A√ëOS")
    print("-" * 40)
    print("Especifica un rango de a√±os para filtrar los resultados:")
    print("Puedes:")
    print("  ‚Ä¢ Dejar ambos vac√≠os para buscar en todos los a√±os")
    print("  ‚Ä¢ Solo especificar 'desde' para art√≠culos desde ese a√±o")
    print("  ‚Ä¢ Solo especificar 'hasta' para art√≠culos hasta ese a√±o")
    print("  ‚Ä¢ Especificar ambos para un rango exacto")
    
    a√±o_desde = None
    a√±o_hasta = None
    
    try:
        desde_input = input("\nüìÖ A√±o desde (ej: 2020) [Enter=todos]: ").strip()
        if desde_input:
            a√±o_desde = int(desde_input)
            if a√±o_desde < 1900 or a√±o_desde > 2025:
                print("‚ö†Ô∏è A√±o debe estar entre 1900-2025, usando valor por defecto")
                a√±o_desde = None
                
        hasta_input = input("üìÖ A√±o hasta (ej: 2024) [Enter=todos]: ").strip()
        if hasta_input:
            a√±o_hasta = int(hasta_input)
            if a√±o_hasta < 1900 or a√±o_hasta > 2025:
                print("‚ö†Ô∏è A√±o debe estar entre 1900-2025, usando valor por defecto")
                a√±o_hasta = None
                
        # Validar que el rango tenga sentido
        if a√±o_desde and a√±o_hasta and a√±o_desde > a√±o_hasta:
            print("‚ö†Ô∏è El a√±o 'desde' no puede ser mayor que 'hasta'. Intercambiando valores...")
            a√±o_desde, a√±o_hasta = a√±o_hasta, a√±o_desde
            
    except ValueError:
        print("‚ö†Ô∏è Formato de a√±o inv√°lido, buscando en todos los a√±os")
        a√±o_desde = a√±o_hasta = None
    
    # Mostrar filtro aplicado
    if a√±o_desde and a√±o_hasta:
        print(f"üîç Filtro aplicado: {a√±o_desde} - {a√±o_hasta}")
    elif a√±o_desde:
        print(f"üîç Filtro aplicado: desde {a√±o_desde}")
    elif a√±o_hasta:
        print(f"üîç Filtro aplicado: hasta {a√±o_hasta}")
    else:
        print("üîç Sin filtro de a√±os - buscando en todos los per√≠odos")
    
    return a√±o_desde, a√±o_hasta


def mostrar_menu():
    """Muestra el men√∫ de opciones"""
    print("\n" + "="*70)
    print("üéì GOOGLE ACAD√âMICO - SEMANTIC SCHOLAR API")
    print("="*70)
    print("1. B√∫squeda general de art√≠culos")
    print("2. B√∫squeda por autor")
    print("3. B√∫squeda por t√≠tulo")
    print("4. Obtener art√≠culo por ID")
    print("5. Configurar API Key")
    print("6. Ver informaci√≥n de la API")
    print("7. Salir")
    print("="*70)
    print("üìä Powered by Semantic Scholar API - Sin l√≠mites de bloqueo!")
    print("üìÖ Todas las b√∫squedas (1-3) incluyen filtro opcional por a√±os")


def busqueda_general(api_client):
    """Realiza una b√∫squeda general"""
    print("\nüìö B√öSQUEDA GENERAL DE ART√çCULOS")
    print("-" * 50)
    
    query = input("Ingrese t√©rminos de b√∫squeda: ").strip()
    if not query:
        print("‚ùå Debe ingresar t√©rminos de b√∫squeda")
        return
    
    try:
        num_resultados = int(input("N√∫mero de resultados (1-100, default=10): ") or "10")
        num_resultados = max(1, min(100, num_resultados))
    except ValueError:
        num_resultados = 10
    
    # Obtener filtro de a√±os
    a√±o_desde, a√±o_hasta = obtener_rango_a√±os()
    
    # Preguntar sobre CSV
    guardar_csv = input("\n¬øGuardar en archivo CSV? (S/n): ").strip().lower()
    guardar_csv = guardar_csv != 'n'
    
    nombre_archivo = None
    if guardar_csv:
        nombre_archivo = input("Nombre del archivo CSV (opcional): ").strip()
        if not nombre_archivo:
            nombre_archivo = None
    
    print(f"\nüîç Buscando '{query}' en Semantic Scholar...")
    print("‚è≥ Consultando API...")
    
    try:
        articulos = api_client.buscar_articulos(query, num_resultados, a√±o_desde=a√±o_desde, a√±o_hasta=a√±o_hasta)
        
        if articulos:
            print(f"\n‚úÖ Se encontraron {len(articulos)} art√≠culos:")
            
            if guardar_csv:
                archivo_csv = imprimir_y_guardar_csv(articulos, nombre_archivo, query)
            else:
                imprimir_articulos(articulos)
        else:
            print("\n‚ö†Ô∏è No se encontraron art√≠culos para esa b√∫squeda.")
            
    except Exception as e:
        print(f"\n‚ùå Error durante la b√∫squeda: {e}")


def busqueda_por_autor(api_client):
    """Realiza una b√∫squeda por autor"""
    print("\nüë§ B√öSQUEDA POR AUTOR")
    print("-" * 40)
    
    autor = input("Ingrese el nombre del autor: ").strip()
    if not autor:
        print("‚ùå Debe ingresar un nombre de autor")
        return
    
    try:
        num_resultados = int(input("N√∫mero de resultados (1-100, default=10): ") or "10")
        num_resultados = max(1, min(100, num_resultados))
    except ValueError:
        num_resultados = 10
    
    # Obtener filtro de a√±os
    a√±o_desde, a√±o_hasta = obtener_rango_a√±os()
    
    # Preguntar sobre CSV
    guardar_csv = input("\n¬øGuardar en archivo CSV? (S/n): ").strip().lower()
    guardar_csv = guardar_csv != 'n'
    
    nombre_archivo = None
    if guardar_csv:
        nombre_archivo = input("Nombre del archivo CSV (opcional): ").strip()
        if not nombre_archivo:
            nombre_archivo = None
    
    print(f"\nüîç Buscando art√≠culos de '{autor}'...")
    print("‚è≥ Consultando API...")
    
    try:
        articulos = api_client.buscar_por_autor(autor, num_resultados, a√±o_desde=a√±o_desde, a√±o_hasta=a√±o_hasta)
        
        if articulos:
            print(f"\n‚úÖ Se encontraron {len(articulos)} art√≠culos:")
            
            if guardar_csv:
                archivo_csv = imprimir_y_guardar_csv(articulos, nombre_archivo, f"autor_{autor}")
            else:
                imprimir_articulos(articulos)
        else:
            print("\n‚ö†Ô∏è No se encontraron art√≠culos para este autor.")
            
    except Exception as e:
        print(f"\n‚ùå Error durante la b√∫squeda: {e}")


def busqueda_por_titulo(api_client):
    """Realiza una b√∫squeda por t√≠tulo"""
    print("\nüìÑ B√öSQUEDA POR T√çTULO")
    print("-" * 40)
    
    titulo = input("Ingrese palabras del t√≠tulo: ").strip()
    if not titulo:
        print("‚ùå Debe ingresar palabras del t√≠tulo")
        return
    
    try:
        num_resultados = int(input("N√∫mero de resultados (1-100, default=10): ") or "10")
        num_resultados = max(1, min(100, num_resultados))
    except ValueError:
        num_resultados = 10
    
    # Obtener filtro de a√±os
    a√±o_desde, a√±o_hasta = obtener_rango_a√±os()
    
    # Preguntar sobre CSV
    guardar_csv = input("\n¬øGuardar en archivo CSV? (S/n): ").strip().lower()
    guardar_csv = guardar_csv != 'n'
    
    nombre_archivo = None
    if guardar_csv:
        nombre_archivo = input("Nombre del archivo CSV (opcional): ").strip()
        if not nombre_archivo:
            nombre_archivo = None
    
    print(f"\nüîç Buscando art√≠culos con t√≠tulo que contenga '{titulo}'...")
    print("‚è≥ Consultando API...")
    
    try:
        articulos = api_client.buscar_por_titulo(titulo, num_resultados, a√±o_desde=a√±o_desde, a√±o_hasta=a√±o_hasta)
        
        if articulos:
            print(f"\n‚úÖ Se encontraron {len(articulos)} art√≠culos:")
            
            if guardar_csv:
                archivo_csv = imprimir_y_guardar_csv(articulos, nombre_archivo, f"titulo_{titulo}")
            else:
                imprimir_articulos(articulos)
        else:
            print("\n‚ö†Ô∏è No se encontraron art√≠culos con ese t√≠tulo.")
            
    except Exception as e:
        print(f"\n‚ùå Error durante la b√∫squeda: {e}")


def buscar_por_id(api_client):
    """Busca un art√≠culo espec√≠fico por su ID"""
    print("\nüÜî B√öSQUEDA POR ID DE SEMANTIC SCHOLAR")
    print("-" * 50)
    
    paper_id = input("Ingrese el Paper ID de Semantic Scholar: ").strip()
    if not paper_id:
        print("‚ùå Debe ingresar un Paper ID")
        return
    
    print(f"\nüîç Buscando art√≠culo con ID '{paper_id}'...")
    print("‚è≥ Consultando API...")
    
    try:
        articulo = api_client.obtener_articulo_por_id(paper_id)
        
        if articulo:
            print(f"\n‚úÖ Art√≠culo encontrado:")
            imprimir_articulos([articulo])
            
            # Preguntar si guardar en CSV
            guardar_csv = input("\n¬øGuardar en archivo CSV? (S/n): ").strip().lower()
            if guardar_csv != 'n':
                nombre_archivo = input("Nombre del archivo CSV (opcional): ").strip()
                if not nombre_archivo:
                    nombre_archivo = None
                archivo_csv = imprimir_y_guardar_csv([articulo], nombre_archivo, f"paper_{paper_id}", False)
        else:
            print("\n‚ö†Ô∏è No se encontr√≥ art√≠culo con ese ID.")
            
    except Exception as e:
        print(f"\n‚ùå Error durante la b√∫squeda: {e}")


def configurar_api_key():
    """Permite configurar la API Key"""
    print("\nüîë CONFIGURAR API KEY")
    print("-" * 40)
    print("Para obtener mejores l√≠mites de rate (100 req/s vs 1 req/s):")
    print("1. Visita: https://www.semanticscholar.org/product/api")
    print("2. Reg√≠strate y obt√©n tu API Key")
    print("3. Ingresa tu API Key aqu√≠")
    print("\nNota: La API Key se usar√° solo para esta sesi√≥n.")
    print("Para uso permanente, modifica el c√≥digo del script.")
    
    api_key = input("\nIngrese su API Key (o Enter para continuar sin ella): ").strip()
    
    if api_key:
        print("‚úÖ API Key configurada para esta sesi√≥n")
        return api_key
    else:
        print("‚ÑπÔ∏è Continuando sin API Key (l√≠mite de 1 request/segundo)")
        return None


def mostrar_info_api():
    """Muestra informaci√≥n sobre la API"""
    print("\n" + "="*70)
    print("‚ÑπÔ∏è  INFORMACI√ìN DE LA API DE SEMANTIC SCHOLAR")
    print("="*70)
    print("üìã Caracter√≠sticas:")
    print("   ‚Ä¢ API oficial y gratuita")
    print("   ‚Ä¢ Sin bloqueos como Google Scholar")
    print("   ‚Ä¢ Datos acad√©micos de alta calidad")
    print("   ‚Ä¢ Informaci√≥n de citaciones en tiempo real")
    print("   ‚Ä¢ Campos de estudio categorizados")
    
    print("\nüìä L√≠mites:")
    print("   ‚Ä¢ Sin API Key: 1 request por segundo")
    print("   ‚Ä¢ Con API Key: 100 requests por segundo")
    print("   ‚Ä¢ M√°ximo 100 resultados por b√∫squeda")
    
    print("\nüîó Enlaces √∫tiles:")
    print("   ‚Ä¢ Documentaci√≥n: https://api.semanticscholar.org/")
    print("   ‚Ä¢ Obtener API Key: https://www.semanticscholar.org/product/api")
    print("   ‚Ä¢ Semantic Scholar: https://www.semanticscholar.org/")
    
    print("\nüìÑ Datos incluidos en CSV:")
    print("   ‚Ä¢ Informaci√≥n b√°sica (t√≠tulo, autores, resumen)")
    print("   ‚Ä¢ M√©tricas (citaciones, a√±o)")
    print("   ‚Ä¢ Metadatos (venue, campos de estudio)")
    print("   ‚Ä¢ IDs √∫nicos para seguimiento")
    
    print("\nüí° Ventajas vs Google Scholar scraping:")
    print("   ‚úÖ Sin riesgo de bloqueo de IP")
    print("   ‚úÖ Datos estructurados y consistentes")
    print("   ‚úÖ Informaci√≥n de citaciones actualizada")
    print("   ‚úÖ API oficial soportada")
    print("   ‚úÖ Mejor para automatizaci√≥n")


def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando Google Acad√©mico con Semantic Scholar API...")
    
    # Configuraci√≥n inicial
    api_key = None
    api_client = SemanticScholarAPI(api_key)
    
    print("\n‚ú® ¬°Nueva versi√≥n con API oficial de Semantic Scholar!")
    print("üìà Sin l√≠mites de bloqueo, datos de alta calidad")
    
    while True:
        mostrar_menu()
        
        try:
            opcion = input("\nSeleccione una opci√≥n (1-7): ").strip()
            
            if opcion == "1":
                busqueda_general(api_client)
            elif opcion == "2":
                busqueda_por_autor(api_client)
            elif opcion == "3":
                busqueda_por_titulo(api_client)
            elif opcion == "4":
                buscar_por_id(api_client)
            elif opcion == "5":
                nueva_api_key = configurar_api_key()
                if nueva_api_key:
                    api_client = SemanticScholarAPI(nueva_api_key)
                    print("üîÑ Cliente API actualizado con nueva API Key")
            elif opcion == "6":
                mostrar_info_api()
            elif opcion == "7":
                print("\nüëã ¬°Hasta luego!")
                break
            else:
                print("\n‚ùå Opci√≥n inv√°lida. Seleccione 1-7.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrumpido. ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"\n‚ùå Error inesperado: {e}")
            
        input("\nüì± Presione Enter para continuar...")


if __name__ == "__main__":
    main()